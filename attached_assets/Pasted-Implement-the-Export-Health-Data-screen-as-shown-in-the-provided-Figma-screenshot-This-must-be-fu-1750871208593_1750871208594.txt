Implement the “Export Health Data” screen as shown in the provided Figma screenshot. This must be fully functional, dynamic, and synced with user-specific data via API and database.

🔧 Functional Requirements:
Make this screen fully functional and dynamic.

No static data should be used. All values (selected metrics, export summary) must be fetched or computed from the database via API.

Ensure the screen is visually identical to the Figma design — no UI structure or styling should be altered.

The button that links to this screen is “Export Health Data” under Settings → Data Export — link the navigation properly.

Implement dynamic logic for the following:

✅ Date Range Section
Options: Last 7 days, Last 30 days, and Custom range (from-to)

If "Custom range" is selected, the date picker should become active.

Ensure proper validation for custom date range.

✅ Data Types (Checkboxes)
Fetch available data types from API: Sleep Quality, Stress Levels, Food Triggers, HRV.

Pre-fill checkboxes based on previously saved user preferences (if any).

Use matching icons and maintain active checkbox style from design.

✅ Export Format
Allow user to select CSV or PDF format (default: CSV).

API should handle file generation accordingly.

For PDF, use previously designed template style that includes graphs if possible.

✅ Export Summary Section
Show selected:

Date Range

Number of selected data types

File format (CSV or PDF)

Estimated file size (calculate approx from DB or set placeholder)

On click of “Export Health Data” button:

Make a backend API call to generate the file with selected data and return download link or trigger file download.

Show a loading state while processing export.

Once completed, allow user to download file (CSV or PDF as selected).

Log the export (date, file type) for user history if needed later.

✅ Safeguards
✅ This new screen must not affect the design or functionality of any other screen.

✅ The design of this screen must match the Figma exactly – rounded cards, spacing, font sizes, button style, icons.

✅ Reuse existing API services or create clean new endpoints to keep the backend modular.

✅ Use current logged-in user's ID to fetch/export personalized data.