name: Build Android APK

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Install dependencies
      run: npm ci

    - name: Build web assets
      run: npm run build

    - name: Sync Capacitor
      run: npx cap sync android

    - name: Build debug APK (default)
      if: env.ANDROID_KEYSTORE_BASE64 == ''
      run: |
        cd android
        ./gradlew assembleDebug
        mv app/build/outputs/apk/debug/app-debug.apk ../app-latest.apk

    - name: Build signed release APK (if secrets exist)
      if: env.ANDROID_KEYSTORE_BASE64 != ''
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        # Decode keystore
        echo $ANDROID_KEYSTORE_BASE64 | base64 -d > android/app/keystore.jks
        
        # Create key.properties for signing
        echo "storeFile=keystore.jks" > android/key.properties
        echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
        echo "storePassword=$ANDROID_STORE_PASSWORD" >> android/key.properties
        echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
        
        cd android
        ./gradlew assembleRelease
        mv app/build/outputs/apk/release/app-release.apk ../app-latest.apk

    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: app-latest.apk
        retention-days: 30

    - name: Upload APK to release (if triggered by release)
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.event.release.tag_name }} app-latest.apk --clobber

    - name: Create/Update latest release (if workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create or update a "latest" tag and release
        git tag -f latest
        git push -f origin latest
        
        # Delete existing latest release if it exists
        gh release delete latest --yes || true
        
        # Create new latest release
        gh release create latest app-latest.apk \
          --title "Latest Build" \
          --notes "Automatically generated APK from latest commit: ${{ github.sha }}"